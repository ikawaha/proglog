// Code generated by goa v3.8.4, DO NOT EDIT.
//
// ProgLog endpoints
//
// Command:
// $ goa gen proglog/design

package proglog

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "ProgLog" service endpoints.
type Endpoints struct {
	Produce       goa.Endpoint
	Consume       goa.Endpoint
	ProduceStream goa.Endpoint
	ConsumeStream goa.Endpoint
}

// ProduceStreamEndpointInput holds both the payload and the server stream of
// the "ProduceStream" method.
type ProduceStreamEndpointInput struct {
	// Stream is the server stream used by the "ProduceStream" method to send data.
	Stream ProduceStreamServerStream
}

// ConsumeStreamEndpointInput holds both the payload and the server stream of
// the "ConsumeStream" method.
type ConsumeStreamEndpointInput struct {
	// Payload is the method payload.
	Payload *ConsumeRequest
	// Stream is the server stream used by the "ConsumeStream" method to send data.
	Stream ConsumeStreamServerStream
}

// NewEndpoints wraps the methods of the "ProgLog" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Produce:       NewProduceEndpoint(s),
		Consume:       NewConsumeEndpoint(s),
		ProduceStream: NewProduceStreamEndpoint(s),
		ConsumeStream: NewConsumeStreamEndpoint(s),
	}
}

// Use applies the given middleware to all the "ProgLog" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Produce = m(e.Produce)
	e.Consume = m(e.Consume)
	e.ProduceStream = m(e.ProduceStream)
	e.ConsumeStream = m(e.ConsumeStream)
}

// NewProduceEndpoint returns an endpoint function that calls the method
// "Produce" of service "ProgLog".
func NewProduceEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ProduceRequest)
		res, err := s.Produce(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProduceresponse(res, "default")
		return vres, nil
	}
}

// NewConsumeEndpoint returns an endpoint function that calls the method
// "Consume" of service "ProgLog".
func NewConsumeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ConsumeRequest)
		res, err := s.Consume(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedConsumeresponse(res, "default")
		return vres, nil
	}
}

// NewProduceStreamEndpoint returns an endpoint function that calls the method
// "ProduceStream" of service "ProgLog".
func NewProduceStreamEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*ProduceStreamEndpointInput)
		return nil, s.ProduceStream(ctx, ep.Stream)
	}
}

// NewConsumeStreamEndpoint returns an endpoint function that calls the method
// "ConsumeStream" of service "ProgLog".
func NewConsumeStreamEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*ConsumeStreamEndpointInput)
		return nil, s.ConsumeStream(ctx, ep.Payload, ep.Stream)
	}
}
