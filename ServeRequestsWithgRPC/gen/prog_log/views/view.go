// Code generated by goa v3.8.4, DO NOT EDIT.
//
// ProgLog views
//
// Command:
// $ goa gen github.com/ikawaha/proglog/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Produceresponse is the viewed result type that is projected based on a view.
type Produceresponse struct {
	// Type to project
	Projected *ProduceresponseView
	// View to render
	View string
}

// Consumeresponse is the viewed result type that is projected based on a view.
type Consumeresponse struct {
	// Type to project
	Projected *ConsumeresponseView
	// View to render
	View string
}

// ProduceresponseView is a type that runs validations on a projected type.
type ProduceresponseView struct {
	Offset *uint64
}

// ConsumeresponseView is a type that runs validations on a projected type.
type ConsumeresponseView struct {
	Record *RecordView
}

// RecordView is a type that runs validations on a projected type.
type RecordView struct {
	Value  []byte
	Offset *uint64
}

var (
	// ProduceresponseMap is a map indexing the attribute names of Produceresponse
	// by view name.
	ProduceresponseMap = map[string][]string{
		"default": {
			"offset",
		},
	}
	// ConsumeresponseMap is a map indexing the attribute names of Consumeresponse
	// by view name.
	ConsumeresponseMap = map[string][]string{
		"default": {
			"record",
		},
	}
)

// ValidateProduceresponse runs the validations defined on the viewed result
// type Produceresponse.
func ValidateProduceresponse(result *Produceresponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateProduceresponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateConsumeresponse runs the validations defined on the viewed result
// type Consumeresponse.
func ValidateConsumeresponse(result *Consumeresponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateConsumeresponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateProduceresponseView runs the validations defined on
// ProduceresponseView using the "default" view.
func ValidateProduceresponseView(result *ProduceresponseView) (err error) {
	if result.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "result"))
	}
	return
}

// ValidateConsumeresponseView runs the validations defined on
// ConsumeresponseView using the "default" view.
func ValidateConsumeresponseView(result *ConsumeresponseView) (err error) {
	if result.Record == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("record", "result"))
	}
	if result.Record != nil {
		if err2 := ValidateRecordView(result.Record); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRecordView runs the validations defined on RecordView.
func ValidateRecordView(result *RecordView) (err error) {
	if result.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "result"))
	}
	if result.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "result"))
	}
	return
}
