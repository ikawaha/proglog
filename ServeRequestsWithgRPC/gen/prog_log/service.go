// Code generated by goa v3.8.4, DO NOT EDIT.
//
// ProgLog service
//
// Command:
// $ goa gen proglog/design

package proglog

import (
	"context"
	proglogviews "proglog/gen/prog_log/views"
)

// Service is the ProgLog service interface.
type Service interface {
	// Produce implements Produce.
	Produce(context.Context, *ProduceRequest) (res *Produceresponse, err error)
	// Consume implements Consume.
	Consume(context.Context, *ConsumeRequest) (res *Consumeresponse, err error)
	// ProduceStream implements ProduceStream.
	ProduceStream(context.Context, ProduceStreamServerStream) (err error)
	// ConsumeStream implements ConsumeStream.
	ConsumeStream(context.Context, *ConsumeRequest, ConsumeStreamServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "ProgLog"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"Produce", "Consume", "ProduceStream", "ConsumeStream"}

// ProduceStreamServerStream is the interface a "ProduceStream" endpoint server
// stream must satisfy.
type ProduceStreamServerStream interface {
	// Send streams instances of "Produceresponse".
	Send(*Produceresponse) error
	// Recv reads instances of "ProduceRequest" from the stream.
	Recv() (*ProduceRequest, error)
	// Close closes the stream.
	Close() error
}

// ProduceStreamClientStream is the interface a "ProduceStream" endpoint client
// stream must satisfy.
type ProduceStreamClientStream interface {
	// Send streams instances of "ProduceRequest".
	Send(*ProduceRequest) error
	// Recv reads instances of "Produceresponse" from the stream.
	Recv() (*Produceresponse, error)
	// Close closes the stream.
	Close() error
}

// ConsumeStreamServerStream is the interface a "ConsumeStream" endpoint server
// stream must satisfy.
type ConsumeStreamServerStream interface {
	// Send streams instances of "Consumeresponse".
	Send(*Consumeresponse) error
	// Close closes the stream.
	Close() error
}

// ConsumeStreamClientStream is the interface a "ConsumeStream" endpoint client
// stream must satisfy.
type ConsumeStreamClientStream interface {
	// Recv reads instances of "Consumeresponse" from the stream.
	Recv() (*Consumeresponse, error)
}

// ConsumeRequest is the payload type of the ProgLog service Consume method.
type ConsumeRequest struct {
	Offset uint64
}

// Consumeresponse is the result type of the ProgLog service Consume method.
type Consumeresponse struct {
	Record *Record
}

type OffsetOutOfRange uint64

// ProduceRequest is the payload type of the ProgLog service Produce method.
type ProduceRequest struct {
	Record *Record
}

// Produceresponse is the result type of the ProgLog service Produce method.
type Produceresponse struct {
	Offset uint64
}

type Record struct {
	Value  []byte
	Offset uint64
}

// Error returns an error description.
func (e OffsetOutOfRange) Error() string {
	return ""
}

// ErrorName returns "OffsetOutOfRange".
func (e OffsetOutOfRange) ErrorName() string {
	return "OffsetOutOfRange"
}

// NewProduceresponse initializes result type Produceresponse from viewed
// result type Produceresponse.
func NewProduceresponse(vres *proglogviews.Produceresponse) *Produceresponse {
	return newProduceresponse(vres.Projected)
}

// NewViewedProduceresponse initializes viewed result type Produceresponse from
// result type Produceresponse using the given view.
func NewViewedProduceresponse(res *Produceresponse, view string) *proglogviews.Produceresponse {
	p := newProduceresponseView(res)
	return &proglogviews.Produceresponse{Projected: p, View: "default"}
}

// NewConsumeresponse initializes result type Consumeresponse from viewed
// result type Consumeresponse.
func NewConsumeresponse(vres *proglogviews.Consumeresponse) *Consumeresponse {
	return newConsumeresponse(vres.Projected)
}

// NewViewedConsumeresponse initializes viewed result type Consumeresponse from
// result type Consumeresponse using the given view.
func NewViewedConsumeresponse(res *Consumeresponse, view string) *proglogviews.Consumeresponse {
	p := newConsumeresponseView(res)
	return &proglogviews.Consumeresponse{Projected: p, View: "default"}
}

// newProduceresponse converts projected type Produceresponse to service type
// Produceresponse.
func newProduceresponse(vres *proglogviews.ProduceresponseView) *Produceresponse {
	res := &Produceresponse{}
	if vres.Offset != nil {
		res.Offset = *vres.Offset
	}
	return res
}

// newProduceresponseView projects result type Produceresponse to projected
// type ProduceresponseView using the "default" view.
func newProduceresponseView(res *Produceresponse) *proglogviews.ProduceresponseView {
	vres := &proglogviews.ProduceresponseView{
		Offset: &res.Offset,
	}
	return vres
}

// newConsumeresponse converts projected type Consumeresponse to service type
// Consumeresponse.
func newConsumeresponse(vres *proglogviews.ConsumeresponseView) *Consumeresponse {
	res := &Consumeresponse{}
	if vres.Record != nil {
		res.Record = transformProglogviewsRecordViewToRecord(vres.Record)
	}
	return res
}

// newConsumeresponseView projects result type Consumeresponse to projected
// type ConsumeresponseView using the "default" view.
func newConsumeresponseView(res *Consumeresponse) *proglogviews.ConsumeresponseView {
	vres := &proglogviews.ConsumeresponseView{}
	if res.Record != nil {
		vres.Record = transformRecordToProglogviewsRecordView(res.Record)
	}
	return vres
}

// transformProglogviewsRecordViewToRecord builds a value of type *Record from
// a value of type *proglogviews.RecordView.
func transformProglogviewsRecordViewToRecord(v *proglogviews.RecordView) *Record {
	if v == nil {
		return nil
	}
	res := &Record{
		Value:  v.Value,
		Offset: *v.Offset,
	}

	return res
}

// transformRecordToProglogviewsRecordView builds a value of type
// *proglogviews.RecordView from a value of type *Record.
func transformRecordToProglogviewsRecordView(v *Record) *proglogviews.RecordView {
	res := &proglogviews.RecordView{
		Value:  v.Value,
		Offset: &v.Offset,
	}

	return res
}
