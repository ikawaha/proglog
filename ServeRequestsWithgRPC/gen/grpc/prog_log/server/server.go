// Code generated by goa v3.8.4, DO NOT EDIT.
//
// ProgLog gRPC server
//
// Command:
// $ goa gen proglog/design

package server

import (
	"context"
	prog_logpb "proglog/gen/grpc/prog_log/pb"
	proglog "proglog/gen/prog_log"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the prog_logpb.ProgLogServer interface.
type Server struct {
	ProcedureH       goagrpc.UnaryHandler
	ConsumeH         goagrpc.UnaryHandler
	ProcedureStreamH goagrpc.StreamHandler
	ConsumeStreamH   goagrpc.StreamHandler
	prog_logpb.UnimplementedProgLogServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// ProcedureStreamServerStream implements the
// proglog.ProcedureStreamServerStream interface.
type ProcedureStreamServerStream struct {
	stream prog_logpb.ProgLog_ProcedureStreamServer
	view   string
}

// ConsumeStreamServerStream implements the proglog.ConsumeStreamServerStream
// interface.
type ConsumeStreamServerStream struct {
	stream prog_logpb.ProgLog_ConsumeStreamServer
	view   string
}

// New instantiates the server struct with the ProgLog service endpoints.
func New(e *proglog.Endpoints, uh goagrpc.UnaryHandler, sh goagrpc.StreamHandler) *Server {
	return &Server{
		ProcedureH:       NewProcedureHandler(e.Procedure, uh),
		ConsumeH:         NewConsumeHandler(e.Consume, uh),
		ProcedureStreamH: NewProcedureStreamHandler(e.ProcedureStream, sh),
		ConsumeStreamH:   NewConsumeStreamHandler(e.ConsumeStream, sh),
	}
}

// NewProcedureHandler creates a gRPC handler which serves the "ProgLog"
// service "Procedure" endpoint.
func NewProcedureHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeProcedureRequest, EncodeProcedureResponse)
	}
	return h
}

// Procedure implements the "Procedure" method in prog_logpb.ProgLogServer
// interface.
func (s *Server) Procedure(ctx context.Context, message *prog_logpb.ProcedureRequest) (*prog_logpb.ProcedureResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Procedure")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ProgLog")
	resp, err := s.ProcedureH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*prog_logpb.ProcedureResponse), nil
}

// NewConsumeHandler creates a gRPC handler which serves the "ProgLog" service
// "Consume" endpoint.
func NewConsumeHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeConsumeRequest, EncodeConsumeResponse)
	}
	return h
}

// Consume implements the "Consume" method in prog_logpb.ProgLogServer
// interface.
func (s *Server) Consume(ctx context.Context, message *prog_logpb.ConsumeRequest) (*prog_logpb.ConsumeResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Consume")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ProgLog")
	resp, err := s.ConsumeH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*prog_logpb.ConsumeResponse), nil
}

// NewProcedureStreamHandler creates a gRPC handler which serves the "ProgLog"
// service "ProcedureStream" endpoint.
func NewProcedureStreamHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, nil)
	}
	return h
}

// ProcedureStream implements the "ProcedureStream" method in
// prog_logpb.ProgLogServer interface.
func (s *Server) ProcedureStream(stream prog_logpb.ProgLog_ProcedureStreamServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "ProcedureStream")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ProgLog")
	_, err := s.ProcedureStreamH.Decode(ctx, nil)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	ep := &proglog.ProcedureStreamEndpointInput{
		Stream: &ProcedureStreamServerStream{stream: stream},
	}
	err = s.ProcedureStreamH.Handle(ctx, ep)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewConsumeStreamHandler creates a gRPC handler which serves the "ProgLog"
// service "ConsumeStream" endpoint.
func NewConsumeStreamHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, nil)
	}
	return h
}

// ConsumeStream implements the "ConsumeStream" method in
// prog_logpb.ProgLogServer interface.
func (s *Server) ConsumeStream(stream prog_logpb.ProgLog_ConsumeStreamServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "ConsumeStream")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ProgLog")
	_, err := s.ConsumeStreamH.Decode(ctx, nil)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	ep := &proglog.ConsumeStreamEndpointInput{
		Stream: &ConsumeStreamServerStream{stream: stream},
	}
	err = s.ConsumeStreamH.Handle(ctx, ep)
	if err != nil {
		return goagrpc.EncodeError(err)
	}
	return nil
}

// SendAndClose streams instances of "prog_logpb.ProcedureStreamResponse" to
// the "ProcedureStream" endpoint gRPC stream.
func (s *ProcedureStreamServerStream) SendAndClose(res *proglog.Produceresponse) error {
	vres := proglog.NewViewedProduceresponse(res, "default")
	v := NewProtoProcedureStreamResponse(vres.Projected)
	return s.stream.SendAndClose(v)
}

// Recv reads instances of "prog_logpb.ProcedureStreamStreamingRequest" from
// the "ProcedureStream" endpoint gRPC stream.
func (s *ProcedureStreamServerStream) Recv() (*proglog.ProduceRequest, error) {
	var res *proglog.ProduceRequest
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	if err = ValidateProcedureStreamStreamingRequest(v); err != nil {
		return res, err
	}
	return NewProduceRequest(v), nil
}

// Send streams instances of "prog_logpb.ConsumeStreamResponse" to the
// "ConsumeStream" endpoint gRPC stream.
func (s *ConsumeStreamServerStream) Send(res *proglog.Consumeresponse) error {
	vres := proglog.NewViewedConsumeresponse(res, "default")
	v := NewProtoConsumeStreamResponse(vres.Projected)
	return s.stream.Send(v)
}

// Recv reads instances of "prog_logpb.ConsumeStreamStreamingRequest" from the
// "ConsumeStream" endpoint gRPC stream.
func (s *ConsumeStreamServerStream) Recv() (*proglog.ConsumeRequest, error) {
	var res *proglog.ConsumeRequest
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewConsumeRequest(v), nil
}

func (s *ConsumeStreamServerStream) Close() error {
	// nothing to do here
	return nil
}
