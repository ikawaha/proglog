// Code generated by goa v3.8.4, DO NOT EDIT.
//
// ProgLog gRPC server types
//
// Command:
// $ goa gen proglog/design

package server

import (
	prog_logpb "proglog/gen/grpc/prog_log/pb"
	proglog "proglog/gen/prog_log"
	proglogviews "proglog/gen/prog_log/views"

	goa "goa.design/goa/v3/pkg"
)

// NewProducePayload builds the payload of the "Produce" endpoint of the
// "ProgLog" service from the gRPC request type.
func NewProducePayload(message *prog_logpb.ProduceRequest) *proglog.ProduceRequest {
	v := &proglog.ProduceRequest{}
	if message.Record != nil {
		v.Record = protobufProgLogpbRecordToProglogRecord(message.Record)
	}
	return v
}

// NewProtoProduceResponse builds the gRPC response type from the result of the
// "Produce" endpoint of the "ProgLog" service.
func NewProtoProduceResponse(result *proglogviews.ProduceresponseView) *prog_logpb.ProduceResponse {
	message := &prog_logpb.ProduceResponse{}
	if result.Offset != nil {
		message.Offset = *result.Offset
	}
	return message
}

// NewConsumePayload builds the payload of the "Consume" endpoint of the
// "ProgLog" service from the gRPC request type.
func NewConsumePayload(message *prog_logpb.ConsumeRequest) *proglog.ConsumeRequest {
	v := &proglog.ConsumeRequest{
		Offset: message.Offset,
	}
	return v
}

// NewProtoConsumeResponse builds the gRPC response type from the result of the
// "Consume" endpoint of the "ProgLog" service.
func NewProtoConsumeResponse(result *proglogviews.ConsumeresponseView) *prog_logpb.ConsumeResponse {
	message := &prog_logpb.ConsumeResponse{}
	if result.Record != nil {
		message.Record = svcProglogviewsRecordViewToProgLogpbRecord(result.Record)
	}
	return message
}

// NewProtoProduceStreamResponse builds the gRPC response type from the result
// of the "ProduceStream" endpoint of the "ProgLog" service.
func NewProtoProduceStreamResponse(result *proglogviews.ProduceresponseView) *prog_logpb.ProduceStreamResponse {
	message := &prog_logpb.ProduceStreamResponse{}
	if result.Offset != nil {
		message.Offset = *result.Offset
	}
	return message
}

func NewProduceRequest(v *prog_logpb.ProduceStreamStreamingRequest) *proglog.ProduceRequest {
	spayload := &proglog.ProduceRequest{}
	if v.Record != nil {
		spayload.Record = protobufProgLogpbRecordToProglogRecord(v.Record)
	}
	return spayload
}

// NewConsumeStreamPayload builds the payload of the "ConsumeStream" endpoint
// of the "ProgLog" service from the gRPC request type.
func NewConsumeStreamPayload(message *prog_logpb.ConsumeStreamRequest) *proglog.ConsumeRequest {
	v := &proglog.ConsumeRequest{
		Offset: message.Offset,
	}
	return v
}

// NewProtoConsumeStreamResponse builds the gRPC response type from the result
// of the "ConsumeStream" endpoint of the "ProgLog" service.
func NewProtoConsumeStreamResponse(result *proglogviews.ConsumeresponseView) *prog_logpb.ConsumeStreamResponse {
	message := &prog_logpb.ConsumeStreamResponse{}
	if result.Record != nil {
		message.Record = svcProglogviewsRecordViewToProgLogpbRecord(result.Record)
	}
	return message
}

// ValidateProduceRequest runs the validations defined on ProduceRequest.
func ValidateProduceRequest(message *prog_logpb.ProduceRequest) (err error) {
	if message.Record == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("record", "message"))
	}
	return
}

// ValidateRecord runs the validations defined on Record.
func ValidateRecord(record *prog_logpb.Record) (err error) {
	if record.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "record"))
	}
	return
}

// ValidateProduceStreamStreamingRequest runs the validations defined on
// ProduceStreamStreamingRequest.
func ValidateProduceStreamStreamingRequest(stream *prog_logpb.ProduceStreamStreamingRequest) (err error) {
	if stream.Record == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("record", "stream"))
	}
	return
}

// protobufProgLogpbRecordToProglogRecord builds a value of type
// *proglog.Record from a value of type *prog_logpb.Record.
func protobufProgLogpbRecordToProglogRecord(v *prog_logpb.Record) *proglog.Record {
	res := &proglog.Record{
		Value:  v.Value,
		Offset: v.Offset,
	}

	return res
}

// svcProglogRecordToProgLogpbRecord builds a value of type *prog_logpb.Record
// from a value of type *proglog.Record.
func svcProglogRecordToProgLogpbRecord(v *proglog.Record) *prog_logpb.Record {
	res := &prog_logpb.Record{
		Value:  v.Value,
		Offset: v.Offset,
	}

	return res
}

// svcProglogviewsRecordViewToProgLogpbRecord builds a value of type
// *prog_logpb.Record from a value of type *proglogviews.RecordView.
func svcProglogviewsRecordViewToProgLogpbRecord(v *proglogviews.RecordView) *prog_logpb.Record {
	res := &prog_logpb.Record{
		Value: v.Value,
	}
	if v.Offset != nil {
		res.Offset = *v.Offset
	}

	return res
}

// protobufProgLogpbRecordToProglogviewsRecordView builds a value of type
// *proglogviews.RecordView from a value of type *prog_logpb.Record.
func protobufProgLogpbRecordToProglogviewsRecordView(v *prog_logpb.Record) *proglogviews.RecordView {
	res := &proglogviews.RecordView{
		Value:  v.Value,
		Offset: &v.Offset,
	}

	return res
}
