// Code generated by goa v3.8.4, DO NOT EDIT.
//
// ProgLog gRPC server encoders and decoders
//
// Command:
// $ goa gen proglog/design

package server

import (
	"context"
	prog_logpb "proglog/gen/grpc/prog_log/pb"
	proglog "proglog/gen/prog_log"
	proglogviews "proglog/gen/prog_log/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeProduceResponse encodes responses from the "ProgLog" service "Produce"
// endpoint.
func EncodeProduceResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*proglogviews.Produceresponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ProgLog", "Produce", "*proglogviews.Produceresponse", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoProduceResponse(result)
	return resp, nil
}

// DecodeProduceRequest decodes requests sent to "ProgLog" service "Produce"
// endpoint.
func DecodeProduceRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *prog_logpb.ProduceRequest
		ok      bool
	)
	{
		if message, ok = v.(*prog_logpb.ProduceRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ProgLog", "Produce", "*prog_logpb.ProduceRequest", v)
		}
		if err := ValidateProduceRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *proglog.ProduceRequest
	{
		payload = NewProducePayload(message)
	}
	return payload, nil
}

// EncodeConsumeResponse encodes responses from the "ProgLog" service "Consume"
// endpoint.
func EncodeConsumeResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*proglogviews.Consumeresponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ProgLog", "Consume", "*proglogviews.Consumeresponse", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoConsumeResponse(result)
	return resp, nil
}

// DecodeConsumeRequest decodes requests sent to "ProgLog" service "Consume"
// endpoint.
func DecodeConsumeRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *prog_logpb.ConsumeRequest
		ok      bool
	)
	{
		if message, ok = v.(*prog_logpb.ConsumeRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ProgLog", "Consume", "*prog_logpb.ConsumeRequest", v)
		}
	}
	var payload *proglog.ConsumeRequest
	{
		payload = NewConsumePayload(message)
	}
	return payload, nil
}

// EncodeProduceStreamResponse encodes responses from the "ProgLog" service
// "ProduceStream" endpoint.
func EncodeProduceStreamResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*proglogviews.Produceresponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ProgLog", "ProduceStream", "*proglogviews.Produceresponse", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoProduceStreamResponse(result)
	return resp, nil
}

// EncodeConsumeStreamResponse encodes responses from the "ProgLog" service
// "ConsumeStream" endpoint.
func EncodeConsumeStreamResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*proglogviews.Consumeresponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ProgLog", "ConsumeStream", "*proglogviews.Consumeresponse", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoConsumeStreamResponse(result)
	return resp, nil
}

// DecodeConsumeStreamRequest decodes requests sent to "ProgLog" service
// "ConsumeStream" endpoint.
func DecodeConsumeStreamRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *prog_logpb.ConsumeStreamRequest
		ok      bool
	)
	{
		if message, ok = v.(*prog_logpb.ConsumeStreamRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ProgLog", "ConsumeStream", "*prog_logpb.ConsumeStreamRequest", v)
		}
	}
	var payload *proglog.ConsumeRequest
	{
		payload = NewConsumeStreamPayload(message)
	}
	return payload, nil
}
