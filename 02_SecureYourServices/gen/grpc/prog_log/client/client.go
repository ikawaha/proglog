// Code generated by goa v3.8.4, DO NOT EDIT.
//
// ProgLog gRPC client
//
// Command:
// $ goa gen proglog/design

package client

import (
	"context"
	prog_logpb "proglog/gen/grpc/prog_log/pb"
	proglog "proglog/gen/prog_log"
	proglogviews "proglog/gen/prog_log/views"

	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli prog_logpb.ProgLogClient
	opts    []grpc.CallOption
}

// ProduceStreamClientStream implements the proglog.ProduceStreamClientStream
// interface.
type ProduceStreamClientStream struct {
	stream prog_logpb.ProgLog_ProduceStreamClient
	view   string
}

// ConsumeStreamClientStream implements the proglog.ConsumeStreamClientStream
// interface.
type ConsumeStreamClientStream struct {
	stream prog_logpb.ProgLog_ConsumeStreamClient
	view   string
}

// NewClient instantiates gRPC client for all the ProgLog service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: prog_logpb.NewProgLogClient(cc),
		opts:    opts,
	}
}

// Produce calls the "Produce" function in prog_logpb.ProgLogClient interface.
func (c *Client) Produce() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildProduceFunc(c.grpccli, c.opts...),
			EncodeProduceRequest,
			DecodeProduceResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// Consume calls the "Consume" function in prog_logpb.ProgLogClient interface.
func (c *Client) Consume() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildConsumeFunc(c.grpccli, c.opts...),
			EncodeConsumeRequest,
			DecodeConsumeResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// ProduceStream calls the "ProduceStream" function in prog_logpb.ProgLogClient
// interface.
func (c *Client) ProduceStream() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildProduceStreamFunc(c.grpccli, c.opts...),
			nil,
			DecodeProduceStreamResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// ConsumeStream calls the "ConsumeStream" function in prog_logpb.ProgLogClient
// interface.
func (c *Client) ConsumeStream() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildConsumeStreamFunc(c.grpccli, c.opts...),
			EncodeConsumeStreamRequest,
			DecodeConsumeStreamResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// Recv reads instances of "prog_logpb.ProduceStreamResponse" from the
// "ProduceStream" endpoint gRPC stream.
func (s *ProduceStreamClientStream) Recv() (*proglog.Produceresponse, error) {
	var res *proglog.Produceresponse
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	proj := NewProduceresponseView(v)
	vres := &proglogviews.Produceresponse{Projected: proj, View: "default"}
	if err := proglogviews.ValidateProduceresponse(vres); err != nil {
		return nil, err
	}
	return proglog.NewProduceresponse(vres), nil
}

// Send streams instances of "prog_logpb.ProduceStreamStreamingRequest" to the
// "ProduceStream" endpoint gRPC stream.
func (s *ProduceStreamClientStream) Send(res *proglog.ProduceRequest) error {
	v := NewProtoProduceStreamStreamingRequest(res)
	return s.stream.Send(v)
}

func (s *ProduceStreamClientStream) Close() error {
	// Close the send direction of the stream
	return s.stream.CloseSend()
}

// Recv reads instances of "prog_logpb.ConsumeStreamResponse" from the
// "ConsumeStream" endpoint gRPC stream.
func (s *ConsumeStreamClientStream) Recv() (*proglog.Consumeresponse, error) {
	var res *proglog.Consumeresponse
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	proj := NewConsumeresponseView(v)
	vres := &proglogviews.Consumeresponse{Projected: proj, View: "default"}
	if err := proglogviews.ValidateConsumeresponse(vres); err != nil {
		return nil, err
	}
	return proglog.NewConsumeresponse(vres), nil
}
